---
# Common to all services
x-common: &common
    restart: unless-stopped
    tty: true # Required for non-root users with selinux enabled.
    security_opt:
        - label=type:container_runtime_t # Required for selinux to access the docker socket and bind mount files.

x-traefik-enable: &traefik-enable
    traefik.enable: true

# Used to override dev configuration.
x-traefik-disable: &traefik-disable
    traefik.enable: false

x-traefik-https-redirect-middleware: &traefik-https-redirect-middleware
    traefik.http.middlewares.https-redirect.redirectscheme.permanent: true
    traefik.http.middlewares.https-redirect.redirectscheme.scheme: https

x-traefik-https-redirect: &traefik-https-redirect https-redirect

x-traefik-certresolver: &traefik-certresolver resolver

networks:
    default:
        name: ${COMPOSE_PROJECT_NAME}_default
        #driver: bridge

volumes:
  whoami-data: {}

secrets:
    # Production secrets:
    #
    # Unless otherwise specified the following command can be used to generate
    # passwords, wherein:
    # The range passed to grep is the valid characters
    #   - '[!-~]' to include special characters or
    # . - [A-Za-z0-9]'
    # The number passed to head is the length of the password.
    #
    # grep -ao '[A-Za-z0-9]' </dev/urandom | head -32 | tr -d '\n' > ./secrets/PASSWORD
    #ACTIVEMQ_PASSWORD:
    #    file: "./secrets/ACTIVEMQ_PASSWORD"
    # Generate with openssl:
    # openssl genrsa -out ./secrets/JWT_PRIVATE_KEY 2048 &>/dev/null
    #JWT_PRIVATE_KEY:
    #    file: "./secrets/JWT_PRIVATE_KEY"
    WHOAMI_PASSWORD:
      file: "./secrets/WHOAMI_PASSWORD"

services:

    whoami:
        image: traefik/whoami:latest
        labels:
            <<: [*traefik-enable, *traefik-https-redirect-middleware]
            traefik.http.routers.whoami_http.entrypoints: http
            traefik.http.routers.whoami_http.middlewares: *traefik-https-redirect
            traefik.http.routers.whoami_http.rule: &traefik-host-whoami Host(`${DOMAIN}`) && PathPrefix(`/whoami`)
            traefik.http.routers.whoami_http.service: whoami
            traefik.http.routers.whoami_https.entrypoints: https
            traefik.http.routers.whoami_https.rule: *traefik-host-whoami
            traefik.http.routers.whoami_https.tls: true
            traefik.http.routers.whoami_https.service: whoami
            traefik.http.routers.whoami_https.tls.certresolver: resolver
            traefik.http.services.whoami.loadbalancer.server.port: 80
        volumes:
          - whoami-data:/var/whoami:rw
        networks:
            default:

    whoami2:
        image: traefik/whoami:latest
        labels:
            <<: [*traefik-enable, *traefik-https-redirect-middleware]
            traefik.http.routers.whoami2_http.entrypoints: http
            traefik.http.routers.whoami2_http.middlewares: *traefik-https-redirect
            traefik.http.routers.whoami2_http.rule: &traefik-host-whoami2 Host(`${DOMAIN}`) && PathPrefix(`/whoami2`)
            traefik.http.routers.whoami2_http.service: whoami2
            traefik.http.routers.whoami2_https.entrypoints: https
            traefik.http.routers.whoami2_https.rule: *traefik-host-whoami2
            traefik.http.routers.whoami2_https.tls: true
            traefik.http.routers.whoami2_https.service: whoami2
            traefik.http.routers.whoami2_https.tls.certresolver: resolver
            traefik.http.services.whoami2.loadbalancer.server.port: 80
        volumes:
          - whoami-data:/var/whoami:rw
        networks:
            default:


    traefik:
        image: traefik:2
        # Change certificatesResolvers caServer to use the staging server when testing changes to the Traefik.
        #   Using the staging server will prevent changes, e.g., firewall changes, from Let's Encrypt suspending
        #   certificate generation attempts for a period of time if config mistakes occur
        #
        # Staging: https://acme-staging-v02.api.letsencrypt.org/directory
        #    --certificatesResolvers.resolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
        # Production: https://acme-v02.api.letsencrypt.org/directory
        #    --certificatesResolvers.resolver.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
        #
        # @See https://letsencrypt.org/docs/staging-environment/
        # @See https://doc.traefik.io/traefik/https/acme/
        command: >-
            --accesslog=true
            --api.insecure=false
            --api.dashboard=false
            --api.debug=false
            --entryPoints.http.address=:80
            --entryPoints.https.address=:443
            --entryPoints.http.forwardedHeaders.trustedIPs=${FRONTEND_IPs}
            --entryPoints.https.forwardedHeaders.trustedIPs=${FRONTEND_IPs}
            --entrypoints.https.http.tls.certResolver=resolver
            --log.level=INFO
            --providers.file.filename=/etc/traefik/tls.yml
            --providers.docker=true
            --providers.docker.network=${COMPOSE_PROJECT_NAME}_default
            --providers.docker.exposedByDefault=false
            --certificatesresolvers.resolver.acme.httpchallenge=true
            --certificatesresolvers.resolver.acme.httpchallenge.entrypoint=http
            --certificatesresolvers.resolver.acme.email=${ACME_EMAIL}
            --certificatesresolvers.resolver.acme.storage=/acme/acme.json
            --certificatesResolvers.resolver.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
        labels:
            <<: [*traefik-disable] # Do no route to Traefik dashboard as it is disabled in production.
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:z,rw
            - ./traefik_config/certs:/acme:Z
            - ./traefik_config/prod-tls.yml:/etc/traefik/tls.yml:Z,ro
        networks:
            default:
                aliases:
                    # Allow services to connect on the same name/port as the outside.
                    - "${DOMAIN}"
        # depends_on:
            # Sometimes traefik doesn't pick up on new containers so make sure
            # they are started before traefik.
